plugins {
    id "org.owasp.dependencycheck" version "${dependencyCheckVersion}"
    id "com.github.hierynomus.license" version "${licensePluginVersion}"
    id "com.github.spotbugs" version "${spotbugsVersion}"
    id "com.bmuschko.docker-remote-api" version "${dockerApiVersion}"
}

apply plugin: 'java'
apply plugin: 'distribution'

apply from: "$rootDir/gradle/Deltix.gradle"
apply from: "$rootDir/gradle/License.gradle"
apply from: "$rootDir/gradle/Release.gradle"
apply from: "$rootDir/gradle/DockerSupport.gradle"

sourceCompatibility = 11
targetCompatibility = 11

ext {
    dockerImageName = "${projectName}"
}

group = 'deltix'

configurations {
    luminary
    generator
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    all*.exclude group: "ch.qos.logback"
    all*.exclude group: "org.springframework", module: "spring-jcl"
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

jar {
    version = project.version
    manifest {
        attributes 'Implementation-Title': "${projectTitle}",
                'Implementation-Version': archiveVersion
    }
}

distributions {
    main {
        distributionBaseName = "${projectName}"
        contents {
            into('/bin') {
                from 'bin/'
            }
            into('/lib') {
                from project.jar
                from project.configurations.runtimeClasspath
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "$buildDir/generated-src/dto"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    mavenDeltix("epm-rtc-java")
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    implementation("deltix-protocol:deltix-protocol-dto-runtime:$protocolGeneratorsVersion")
    luminary("deltix-protocol:deltix-protocol-generator:$protocolGeneratorsVersion:luminary")
    generator("deltix-protocol:deltix-protocol-generator:$protocolGeneratorsVersion")

    compileOnly("com.google.code.findbugs:annotations:${findbugsAnnotationsVersion}")

    // http://find-sec-bugs.github.io
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findSecBugsVersion}"

    implementation("deltix:deltix-gflog-core:${gflogVersion}")
    implementation("deltix:deltix-gflog-jcl:${gflogVersion}")
    implementation("deltix:deltix-gflog-jul:${gflogVersion}")
    implementation("deltix:deltix-gflog-slf4j:${gflogVersion}")

    implementation("javax.ws.rs:javax.ws.rs-api:${rsVersion}")
    implementation("jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}")

    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOAuthVersion}")
    implementation("org.springframework.security:spring-security-jwt:1.1.0.RELEASE") // override old one from jwk-token-store

    implementation("com.auth0:java-jwt:4.4.0")
    implementation("com.auth0:jwks-rsa:0.22.0")

    runtimeOnly("org.glassfish.jersey.core:jersey-common:${glassfishVersion}")

    testImplementation("junit:junit:${junitVersion}")
    testImplementation("com.tngtech.java:junit-dataprovider:${junitDataproviderVersion}")
}

task generateDto(type: JavaExec) {
    def searchPath = configurations.luminary.files.inject([]) { list, item ->
        list = list + item.getPath()
    }.join(System.getProperty("path.separator"))

    logger.info("LUMINARY_SEARCH_PATH=$searchPath")
    environment LUMINARY_SEARCH_PATH: searchPath

    mainClass.set("deltix.dto.generator.DtoGenerator")
    classpath = configurations.generator
    args = ["$rootDir/luminary/Dto/Project.json", "$rootDir/luminary/Dto/Java.DTO.json", "$buildDir/generated-src/dto"]
}

task generate(dependsOn: [generateDto]) {
}
compileJava.dependsOn generate

dependencyCheck {
    if (project.hasProperty("failOnHighCVSS") && project.getProperty("failOnHighCVSS") == 'true') {
        failBuildOnCVSS = 7
    }
    skipProjects = []
    suppressionFile = file("$rootDir/dependency-check-suppression-file.xml")
    skipConfigurations = [ "luminary" ]
    analyzers {
        assemblyEnabled = false
    }
}

spotbugs {
    effort = "max"
    reportLevel = "medium"
    ignoreFailures = project.findProperty('failOnSpotBugs') == null // gradle -PfailOnSpotBugs ..
    //sourceSets = sourceSets.main // exclude tests
    excludeFilter = file("$rootDir/spotbugs-excludes.xml")
}

task collectSpotbugs(type: Copy) {
    from "$project.buildDir/reports/spotbugs/main.html"
    into "$rootProject.buildDir/reports/spotbugs"
    rename { String fileName -> "${project.name}.html" }
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
    }
}

task prepareFilesForDocker(type: Copy) {
    group 'docker'
    dependsOn ':installDist'
    into './build/docker'
    into ('') { from "./src/main/docker/startup.sh" }
    from './build/install/'
}
