plugins {
    id "org.owasp.dependencycheck" version "${dependencyCheckVersion}"
    id "com.github.hierynomus.license" version "${licensePluginVersion}"
    id "com.github.spotbugs" version "${spotbugsVersion}"
    id "java"
    id "application"
}

sourceCompatibility = 11
targetCompatibility = 11

group = 'com.epam.aidial'
version = '1.0.0'

configurations {
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    all*.exclude group: "ch.qos.logback"
    all*.exclude group: "org.springframework", module: "spring-jcl"
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

jar {
    manifest {
        attributes 'Implementation-Title': "${projectTitle}",
                'Implementation-Version': archiveVersion
    }
}

application {
    mainClass = "com.epam.aidial.auth.helper.AuthProxy"
}

repositories {
    mavenCentral()
}

dependencies {

    compileOnly("com.google.code.findbugs:annotations:${findbugsAnnotationsVersion}")

    // http://find-sec-bugs.github.io
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findSecBugsVersion}"

    implementation("com.epam.deltix:gflog-core:${gflogVersion}")
    implementation("com.epam.deltix:gflog-jcl:${gflogVersion}")
    implementation("com.epam.deltix:gflog-jul:${gflogVersion}")
    implementation("com.epam.deltix:gflog-slf4j:${gflogVersion}")

    implementation("javax.ws.rs:javax.ws.rs-api:${rsVersion}")
    implementation("jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}")

    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOAuthVersion}")
    implementation("org.springframework.security:spring-security-jwt:1.1.0.RELEASE") // override old one from jwk-token-store

    implementation("com.auth0:java-jwt:4.4.0")
    implementation("com.auth0:jwks-rsa:0.22.0")

    runtimeOnly("org.glassfish.jersey.core:jersey-common:${glassfishVersion}")

    testImplementation("junit:junit:${junitVersion}")
    testImplementation("com.tngtech.java:junit-dataprovider:${junitDataproviderVersion}")
}

dependencyCheck {
    if (project.hasProperty("failOnHighCVSS") && project.getProperty("failOnHighCVSS") == 'true') {
        failBuildOnCVSS = 7
    }
    skipProjects = []
    suppressionFile = file("$rootDir/dependency-check-suppression-file.xml")
    skipConfigurations = [ "luminary" ]
    analyzers {
        assemblyEnabled = false
    }
}

spotbugs {
    effort = "max"
    reportLevel = "medium"
    ignoreFailures = project.findProperty('failOnSpotBugs') == null // gradle -PfailOnSpotBugs ..
    //sourceSets = sourceSets.main // exclude tests
    excludeFilter = file("$rootDir/spotbugs-excludes.xml")
}

task collectSpotbugs(type: Copy) {
    from "$project.buildDir/reports/spotbugs/main.html"
    into "$rootProject.buildDir/reports/spotbugs"
    rename { String fileName -> "${project.name}.html" }
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
    }
}