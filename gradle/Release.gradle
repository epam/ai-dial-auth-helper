allprojects { prj ->
    prj.ext {
        loadVersion = {
            def version = new File("$rootDir/VERSION").getText("UTF-8").replaceAll("\\s", "")
            return version
        }

        saveVersion = { v ->
            new File("$rootDir/VERSION").write(v)
        }

        parseVersion = { ->
            def semanticVersion = loadVersion()
            def matcher = semanticVersion =~ "^(\\d+)\\.(\\d+)\\.(\\d+)(-.*)?\$"
            if (!matcher.matches() || !matcher[0][1].isInteger() || !matcher[0][2].isInteger() || !matcher[0][3].isInteger())
                throw new GradleException("Version '$semanticVersion' is invalid.")
            return [matcher[0][1] as Integer, matcher[0][2] as Integer, matcher[0][3] as Integer, matcher[0][4]] + 1
        }
    }

    prj.version = loadVersion()
}

project.rootProject.task('prepareReleaseVersion') {
    doLast {
        def (major, minor, patch, extra) = parseVersion()
        if (extra != "-SNAPSHOT")
            throw new GradleException("Version '$version' is invalid.")
        def newVersion = "${major}.${minor}.${patch + 1}"
        logger.lifecycle("Changing version from '$version' to '$newVersion'")
        saveVersion(newVersion.toString())
    }
}

project.rootProject.task('pushVersion') {
    doLast {
        exec { commandLine 'git', 'tag', version }
        exec { commandLine 'git', 'push', 'origin', version }
    }
}

project.rootProject.task('prepareSnapshotVersion') {
    doLast {
        def (major, minor, patch, extra) = parseVersion()
        if (extra != null)
            throw new GradleException("Version '$version' is invalid.")
        def newVersion = "${major}.${minor}.${patch}-SNAPSHOT"
        logger.lifecycle("Changing version from '$version' to '$newVersion'")
        saveVersion(newVersion.toString())
    }
}

